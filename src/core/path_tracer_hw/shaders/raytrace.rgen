/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

// Copyright 2023 Pengfei Zhu
// Licensed under GPLv2 or any later version
// Refer to the license.txt file included.

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

#include "core/path_tracer_hw/shaders/path_tracer_glsl.h"
#include "core/path_tracer_hw/shaders/ray_common.glsl"
#include "core/path_tracer_hw/shaders/rng.glsl"

layout(push_constant, std140) uniform constants {
    PathTracerPushConstant p;
}
push_constant;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 0, rgba32f) uniform image2D image;
layout(set = 2, binding = 0, rgba32f) uniform image2D other_image;

layout(location = 0) rayPayloadEXT hitPayload prd;

// Russian Roulette settings
#define RR 1
#define P_RR 0.95

vec3 PathTrace(vec3 origin, vec3 direction) {
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.hit_value = vec3(0);
    prd.depth = 0;
    prd.ray_origin = origin;
    prd.ray_direction = direction;
    prd.weight = vec3(0);

    vec3 cur_weight = vec3(1);
#if RR
    cur_weight /= P_RR;
#endif
    vec3 hit_value = vec3(0);

    for (; prd.depth < 50; prd.depth++) {
#if RR
        if (rnd(prd.seed) > P_RR) {
            break;
        }
#endif
        traceRayEXT(topLevelAS,        // acceleration structure
                    rayFlags,          // rayFlags
                    0xFF,              // cullMask
                    0,                 // sbtRecordOffset
                    0,                 // sbtRecordStride
                    0,                 // missIndex
                    prd.ray_origin,    // ray origin
                    tMin,              // ray min range
                    prd.ray_direction, // ray direction
                    tMax,              // ray max range
                    0                  // payload (location = 0)
        );

        hit_value += prd.hit_value * cur_weight;
        cur_weight *= prd.weight;
#if RR
        cur_weight /= P_RR;
#endif
    }

    return hit_value;
}

vec3 SamplePixel(ivec2 imageCoords, ivec2 sizeImage) {
    vec3 pixelColor = vec3(0);

    // Subpixel jitter: send the ray through a different position inside the pixel each time, to
    // provide antialiasing.
    vec2 subpixel_jitter =
        push_constant.p.frame == 0 ? vec2(0.5f, 0.5f) : vec2(rnd(prd.seed), rnd(prd.seed));

    // Compute sampling position between [-1 .. 1]
    const vec2 pixelCenter = vec2(imageCoords) + subpixel_jitter;
    const vec2 inUV = pixelCenter / vec2(sizeImage.xy);
    vec2 d = inUV * 2.0 - 1.0;

    // Compute ray origin and direction
    vec4 origin = push_constant.p.view_inverse * vec4(0, 0, 0, 1);
    vec4 target = push_constant.p.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = push_constant.p.view_inverse * vec4(normalize(target.xyz), 0);

    vec3 radiance = PathTrace(origin.xyz, direction.xyz);

    // Removing fireflies
    float lum = dot(radiance, vec3(0.212671f, 0.715160f, 0.072169f));
    if (lum > push_constant.p.intensity_multiplier) { // magic
        radiance *= push_constant.p.intensity_multiplier / lum;
    }

    return radiance;
}

void main() {
    // Initialize the random number
    prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    vec3 final_color = vec3(0);
    uint num_samples = 0;
    for (uint i = 0; i < 8; ++i) {
        vec3 val = SamplePixel(ivec2(gl_LaunchIDEXT.xy), ivec2(gl_LaunchSizeEXT.xy));
        if (isnan(val.x) || isnan(val.y) || isnan(val.z)) {
            continue;
        }
        final_color += val;
        num_samples++;
    }
    final_color /= num_samples;

    // Accumulate over time
    if (push_constant.p.frame > 0) {
        const float a = 1.0f / float(push_constant.p.frame + 1);
        const vec3 old_color = imageLoad(other_image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, final_color, a), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(final_color, 1.0));
    }
}
