#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

#include "core/path_tracer_hw/shaders/path_tracer_glsl.h"
#include "core/path_tracer_hw/shaders/ray_common.glsl"
#include "core/path_tracer_hw/shaders/sampling.glsl"

layout(push_constant) uniform constants {
    PathTracerPushConstant p;
}
push_constant;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() {
    // Initialize the random number
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = push_constant.p.view_inverse * vec4(0, 0, 0, 1);
    vec4 target = push_constant.p.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = push_constant.p.view_inverse * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.hit_value = vec3(0);
    prd.seed = seed;
    prd.depth = 0;
    prd.ray_origin = origin.xyz;
    prd.ray_direction = direction.xyz;
    prd.weight = vec3(0);

    vec3 cur_weight = vec3(1);
    vec3 hit_value = vec3(0);

    for (; prd.depth < 10; prd.depth++) {
        traceRayEXT(topLevelAS,        // acceleration structure
                    rayFlags,          // rayFlags
                    0xFF,              // cullMask
                    0,                 // sbtRecordOffset
                    0,                 // sbtRecordStride
                    0,                 // missIndex
                    prd.ray_origin,    // ray origin
                    tMin,              // ray min range
                    prd.ray_direction, // ray direction
                    tMax,              // ray max range
                    0                  // payload (location = 0)
        );

        hit_value += prd.hit_value * cur_weight;
        cur_weight *= prd.weight;
    }

    // Accumulate over time
    if (push_constant.p.frame > 0) {
        const float a = 1.0f / float(push_constant.p.frame + 1);
        const vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hit_value, a), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hit_value, 1.0));
    }
}
